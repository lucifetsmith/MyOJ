/*************************************************************************************************************/
https://leetcode.com/problems/reverse-vowels-of-a-string/

Write a function that takes a string as input and reverse only the vowels of a string.

Example 1:
 Given s = "hello", return "holle". 

 Example 2:
  Given s = "leetcode", return "leotcede". 

public class Solution {
    public string ReverseVowels(string s) {
            
	        }
}

/*************************************************************************************************************/


/*************************************************************************************************************/
https://leetcode.com/problems/reverse-string://leetcode.com/problems/reverse-string/

Write a function that takes a string as input and returns the string reversed.

Example:
 Given s = "hello", return "olleh". 

public class Solution {
    public string ReverseString(string s) {
            
	        }
}

/*************************************************************************************************************/
https://leetcode.com/problems/integer-break/

Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get. 

For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4). 

Note: you may assume that n is not less than 2. 

Hint:
1.There is a simple O(n) solution to this problem.
2.You may check the breaking results of n ranging from 7 to 10 to discover the regularities.

public class Solution {
    public int IntegerBreak(int n) {
            
	        }
}

/*************************************************************************************************************/


/*************************************************************************************************************/
https://leetcode.com/problems/power-of-four/
Given an integer (signed 32 bits), write a function to check whether it is a power of 4. 

Example:
 Given num = 16, return true. Given num = 5, return false. 

 Follow up: Could you solve it without loops/recursion? 

public class Solution {
    public bool IsPowerOfFour(int num) {
        
    }
}

/*************************************************************************************************************/


/*************************************************************************************************************/
https://leetcode.com/problems/flatten-nested-list-iterator/
Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
 Given the list [[1,1],2,[1,1]], 

 By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1]. 


 Example 2:
  Given the list [1,[4,[6]]], 

  By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]. 

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     int GetInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     IList<NestedInteger> GetList();
 * }
 */
public class NestedIterator {

    public NestedIterator(IList<NestedInteger> nestedList) {
        
    }

    public bool HasNext() {
        
    }

    public int Next() {
        
    }
}

/**
 * Your NestedIterator will be called like this:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.HasNext()) v[f()] = i.Next();
 */
/*************************************************************************************************************/
